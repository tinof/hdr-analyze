name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint (fmt + clippy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.82.0
      - uses: Swatinem/rust-cache@v2
      - name: cargo fmt (check)
        run: cargo fmt --all -- --check
      - name: cargo clippy (deny warnings)
        run: cargo clippy --workspace --all-targets --locked -- -D warnings

  test:
    name: Test (Ubuntu)
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.82.0
      - uses: Swatinem/rust-cache@v2
      - name: Install FFmpeg dev libs
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config clang lld libclang-dev \
            libavformat-dev libavcodec-dev libavutil-dev \
            libavfilter-dev libavdevice-dev libswscale-dev
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/include/$(gcc -dumpmachine)" >> $GITHUB_ENV
      - name: cargo test (locked)
        run: cargo test --workspace --verbose --locked

  build:
    name: Build (xplat)
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.82.0
      - uses: Swatinem/rust-cache@v2

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config clang lld libclang-dev \
            libavformat-dev libavcodec-dev libavutil-dev \
            libavfilter-dev libavdevice-dev libswscale-dev
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/include/$(gcc -dumpmachine)" >> $GITHUB_ENV

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew update
          brew install llvm ffmpeg pkg-config
          echo "LIBCLANG_PATH=$(brew --prefix llvm)/lib" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix ffmpeg)/lib/pkgconfig:$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I$(brew --prefix)/include" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install -y llvm
          vcpkg install ffmpeg:x64-windows
          echo "LIBCLANG_PATH=C:\\Program Files\\LLVM\\bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_PATH=$env:VCPKG_INSTALLATION_ROOT\\installed\\x64-windows\\lib\\pkgconfig" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: cargo build (locked)
        run: cargo build --release --workspace --verbose --locked

  build-linux-arm64:
    name: Build (Linux ARM64)
    runs-on: ubuntu-24.04-arm64
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.82.0
      - uses: Swatinem/rust-cache@v2
      - name: Install dependencies (ARM64)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential pkg-config clang lld libclang-dev \
            libavformat-dev libavcodec-dev libavutil-dev \
            libavfilter-dev libavdevice-dev libswscale-dev
          echo "BINDGEN_EXTRA_CLANG_ARGS=-I/usr/include/$(gcc -dumpmachine)" >> $GITHUB_ENV
      - name: cargo build (locked)
        run: cargo build --release --workspace --verbose --locked

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.82.0
      - name: Install cargo-audit
        run: cargo install --locked cargo-audit
      - name: Run Security Audit
        run: cargo audit
